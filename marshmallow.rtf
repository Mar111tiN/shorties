{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14080\viewh7900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Marshmallow
\f1\b0\fs24 \
\
library for object serialization (converting objects to dicts/json and reverse)\
\

\f0\b imports
\f1\b0 \
	from marshmallow import Schema, fields\
\

\f0\b create Schema classes
\f1\b0 \
\
class mySchema(Schema):			class contains all the fields \
\
	name = fields.Str()				different fields exist for different data types\
	date = fields.DateTime()			datetime import required\
	pass = fields.Str()\
\

\f0\b create and configure schema instances
\f1\b0 \
	schema = mySchema(`options`)		schema can be used to dump (obj -> dict) or load (dict -> obj)\
options:\
	mySchema(only=('name', 'date'))		only keyword determines which fields are used for dumping							has to be a tuple\
\
\
\

\f0\b use schemas\
	
\f1\b0 dict = \{ 'name': 'myName',  'date' = datetime.datetime.now(), 'pass'='1234' \}\
}